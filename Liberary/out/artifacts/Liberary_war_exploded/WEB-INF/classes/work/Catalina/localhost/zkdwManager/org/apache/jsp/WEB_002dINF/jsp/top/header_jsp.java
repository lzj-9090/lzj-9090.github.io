/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2018-10-28 08:14:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.top;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");

	String path = request.getContextPath();
	String basePath = request.getScheme() + "://"
			+ request.getServerName() + ":" + request.getServerPort()
			+ path + "/";

      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<title>台区精益化管理平台</title>\r\n");
      out.write("\t<link href=\"");
      out.print(basePath);
      out.write("css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("\t<link href=\"");
      out.print(basePath);
      out.write("css/css.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("\t<link id=\"style_css\" href=\"");
      out.print(basePath);
      out.write("css/blue.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\t.content_top_btn:hover {\r\n");
      out.write("\t\tcolor: #fff; /*鼠标经过的颜色变化*/\r\n");
      out.write("\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script src=\"");
      out.print(basePath);
      out.write("js/jquery.min.js\" type=\"text/javascript\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(basePath);
      out.write("js/bootstrap.min.js\" type=\"text/javascript\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"");
      out.print(basePath );
      out.write("js/jquery.form.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(basePath);
      out.write("js/app.js\" type=\"text/javascript\"></script>\r\n");
      out.write("    <link href=\"");
      out.print(basePath);
      out.write("js/jquery-validation/1.11.0/jquery.validate.min.css\" type=\"text/css\" rel=\"stylesheet\" />\r\n");
      out.write("\t<script src=\"");
      out.print(basePath);
      out.write("js/jquery-validation/1.11.0/jquery.validate.min.js\" type=\"text/javascript\"></script>\r\n");
      out.write("\t<script src=\"");
      out.print(basePath);
      out.write("js/jquery-validation/1.11.0/jquery.validate.method.js\" type=\"text/javascript\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(basePath);
      out.write("js/My97DatePicker/WdatePicker.js\" type=\"text/javascript\"></script>\r\n");
      out.write("<!--     <script type=\"text/javascript\" src=\"");
      out.print(basePath);
      out.write("ckeditor/ckeditor.js\"> </script> -->\r\n");
      out.write("<!-- \t<script type=\"text/javascript\" src=\"");
      out.print(basePath);
      out.write("ckfinder/ckfinder.js\"> </script> -->\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    function nextPage(pageNo,totalPage){\r\n");
      out.write("    \tif(pageNo < totalPage){\r\n");
      out.write("    \t\treturn true;\r\n");
      out.write("    \t}\r\n");
      out.write("    \treturn false;\r\n");
      out.write("    }\t\r\n");
      out.write("\r\n");
      out.write("    function prevPage(pageNo){\r\n");
      out.write("\r\n");
      out.write("    \tif(pageNo == 1){\r\n");
      out.write("    \t\treturn false;\r\n");
      out.write("    \t}\r\n");
      out.write("    \treturn true;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    function topage(){\r\n");
      out.write("    \tvar pageNo = $(\"input[name='pageNo']\").val();\r\n");
      out.write("    \tvar totalPage = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${totalPage}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("    \tif(parseInt(pageNo) > parseInt(totalPage) || parseInt(pageNo) <= 0){\r\n");
      out.write("    \t\treturn false;\r\n");
      out.write("    \t}\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    function openwinImg(path) {\r\n");
      out.write("    \tvar basePath1 = $(\"#basePath\").val();\r\n");
      out.write("    \tvar iWidth=1600;                          //弹出窗口的宽度; \r\n");
      out.write("        var iHeight=800;                         //弹出窗口的高度; \r\n");
      out.write("    \t//获得窗口的垂直位置 \r\n");
      out.write("        var iTop = (window.screen.availHeight - 30 - iHeight) / 2; \r\n");
      out.write("        //获得窗口的水平位置 \r\n");
      out.write("        var iLeft = (window.screen.availWidth - 10 - iWidth) / 2; \r\n");
      out.write("        window.open(basePath1+path, \"newwindow\", \"height=\"+iHeight+\", width=\"+iWidth+\", top=\"+iTop+\",left=\"+iLeft+\", toolbar =no, menubar=no, scrollbars=no, resizable=no, location=no, status=no\") //写成一行\r\n");
      out.write("       } \r\n");
      out.write("    </script>\r\n");
      out.write("</head>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
