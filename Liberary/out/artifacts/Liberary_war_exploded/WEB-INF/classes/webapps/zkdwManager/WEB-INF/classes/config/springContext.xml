<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	     http://www.springframework.org/schema/beans
	      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 定义受环境影响易变的变量 -->
	<context:property-placeholder
		location="classpath:/config/property/jdbc.properties" />

	<!-- 当前Spring支持注解 -->
	<context:annotation-config />
	<!-- 设置当前项目的根包 -->
	<context:component-scan base-package="com.chinfotech.*" />
	<!-- task任务扫描注解 -->
	<task:executor id="executor" pool-size="5" />
	<task:scheduler id="scheduler" pool-size="10" />
	<task:annotation-driven executor="executor"
		scheduler="scheduler" />

	<!--
		<bean id="StartCaptchaServlet"
		class="com.chinfotech.common.gtutil.StartCaptchaServlet"></bean>
	-->
	<!-- c3p0配置数据源 -->
	<bean id="MysqldataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!--
			dbcp配置数据源 <bean id="MysqldataSource"
			class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
		-->


		<!-- DATABASE  -->
		<!-- 数据库驱动 C3P0-->
		<property name="driverClass">
			<value>${jdbc.driver}</value>
		</property>


		<!-- 数据库地址C3P0-->
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>

		<!-- 数据库用户名C3P0 -->
		<property name="user">
			<value>${jdbc.username}</value>
		</property>

		<!-- 数据库密码C3P0-->
		<property name="password">
			<value>${jdbc.password}</value>
		</property>

		<!--
			数据库驱动 DBCP <property name="driverClassName">
			<value>${jdbc.driver}</value> </property> <property name="url">
			<value>${jdbc.url}</value> </property> <property name="username">
			<value>${jdbc.username}</value> </property> <property
			name="password"> <value>${jdbc.password}</value> </property>
		-->



		<!-- DATABASE END -->


		<!-- Connection Pooling -->

		<!-- C3P0  -->
		<!--c3p0连接池中保留的最小连接数-->
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>

		<!--c3p0连接池中保留的最大连接数。Default: 15-->
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>

		<!--c3p0最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0-->
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>

		<!--c3p0当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>

		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>

		<!--c3p0每60秒检查所有连接池中的空闲连接。Default: 0-->
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>

		<!--c3p0定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>${c3p0.acquireRetryAttempts}</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>${c3p0.breakAfterAcquireFailure}</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>${c3p0.testConnectionOnCheckout}</value>
		</property>

		<!-- C3P0 END  -->


		<!-- DBCP  -->

		<!--
			dbcp 初始化连接 <property name="initialSize">
			<value>${dbcp.initialSize}</value></property>
		-->
		<!--
			dbcp 最大空闲连接 <property name="maxIdle"> <value>${dbcp.maxIdle}</value>
			</property>
		-->

		<!--
			dbcp 最小空闲连接 <property name="minIdle"> <value>${dbcp.minIdle}</value>
			</property>
		-->

		<!--
			dbcp 最大连接数量 <property name="maxActive">
			<value>${dbcp.maxActive}</value> </property>
		-->

		<!--
			dbcp 是否自动回收超时连接 true /false <property name="removeAbandoned">
			<value>${dbcp.removeAbandoned}</value> </property>
		-->

		<!--
			dbcp 超时时间(单位:s) <property name="removeAbandonedTimeout">
			<value>${dbcp.removeAbandonedTimeout}</value> </property>
		-->

		<!--
			dbcp 超时等待时间 (单位:ms) <property name="maxWait">
			<value>${dbcp.maxWait}</value> </property>
		-->

		<!--
			在自动回收超时连接的时候打印连接的超时错误 <property name="logAbandoned">
			<value>${dbcp.logAbandoned}</value> </property>
		-->
		<!--
			dbcp SQL查询 true/false <property
			name="validationQuery">${dbcp.validationQuery}</property> <property
			name="testOnBorrow">${dbcp.testOnBorrow}</property>
		-->

		<!--  DBCP end    -->


	</bean>


	<bean id="dynamicDataSource" class="com.chinfotech.common.action.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="MysqldataSource" key="MysqldataSource"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="MysqldataSource">
		</property>
	</bean>
	<!-- 配置数据源结束 -->
	<!-- Connection Pooling  END-->

	<!-- 配置session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dynamicDataSource" />
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<!-- 启动二级缓存 -->
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
			</props>
		</property>

		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/com/chinfotech/zkdw/model</value>
			</list>
		</property>
	</bean>
	<!-- 事务管理配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
</beans>